#!/bin/groovy
/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
def testXMLFile = params.pythonTestXmlFile
def mainPythonAllXmlFiles = ""

// // VM Lockable resources
// def vmResource = params.vmLockableResource

// // Tags to shorten pipeline duration
//def doMandatoryTests = false
//def doFullTestsuite = false

def termUE = 0
def termENB = 1
def termStatusArray = new Boolean[2]
def buildStageStatus = true

pipeline {
    agent {
       label 'nodeExecutor'
    }
    options {
        disableConcurrentBuilds()
        timestamps()
        //gitLabConnection('OAI Gitlab fork')
    }
    stages {
        stage ("print latest commit info") {
            steps {
                // script {
                //     gitlabCommitStatus(name: "Print latest commit info") {
                //         echo "Building on: "
                //         echo "  Repository -- ${GIT_URL}"
                //         echo "  Branch -- ${GIT_BRANCH}"
                //         echo "  Commit -- ${GIT_COMMIT}"
                //         echo "ENV eNB_mergeRequest: ${params.eNB_mergeRequest}"
                //         echo "ENV eNB_Repository: ${params.eNB_Repository}"
                //         echo "ENV source branch: ${params.eNB_Branch}"
                //         echo "ENV target branch: ${params.eNB_TargetBranch}"
                //     }
                // }
            }
        }
        
        // stage ('Clone Ansible toolchain') {
        //     steps {
        //         script {
        //             gitlabCommitStatus(name: "Clone Ansible scripts") {
        //                 sh "git clone https://gitlab.com/shweta.shrivastava/colosseum-cm.git"
        //             }
        //         }
        //     }
        // }
        // stage ('Configure Ansible toolchain') {
        //     steps {
        //         script {
        //             gitlabCommitStatus(name: "Configure Ansible toolchain") {
        //                 dir ('colosseum-cm') {
        //                     sh "git checkout oai-ci"
        //                     sh "./bootstrap.sh ${GIT_URL} ${params.eNB_Branch} ${GIT_COMMIT}"
        //                 }
        //             }
        //         }
        //     }
        // }
        // stage ('Run Ansible toolchain') {
        //     steps {
        //         script {
        //             gitlabCommitStatus(name: "Run Ansible toolchain") {
        //                 dir ('colosseum-cm/ansible') {
        //                     sh "ansible-playbook oai.yml -e 'ansible_python_interpreter=/usr/bin/python3'"
        //                 }
        //             }
        //         }
        //     }
        // }
        stage ("Build and Test") {
            steps {
                script {
                    sh "git clone https://gitlab.com/shweta.shrivastava/colosseum-cm.git"
                    dir ('colosseum-cm') {
                       sh "git checkout oai-ci"
                       sh "./bootstrap.sh ${GIT_URL} ${params.eNB_Branch} ${GIT_COMMIT}"
                    }
                    dir ('ci-scripts') {
                        // If not present picking a default XML file
                        if (params.pythonTestXmlFile == null) {
                            // picking default
                            testXMLFile = 'xml_files/gnb_usrp_build.xml'
                            echo "Test XML file(default):   ${testXMLFile}"
                            mainPythonAllXmlFiles += "--XMLTestFile=" + testXMLFile + " "
                        } else {
                            String[] myXmlTestSuite = testXMLFile.split("\\r?\\n")
                            for (xmlFile in myXmlTestSuite) {
                                if (fileExists(xmlFile)) {
                                    mainPythonAllXmlFiles += "--XMLTestFile=" + xmlFile + " "
                                    echo "Test XML file         :   ${xmlFile}"
                                }
                            }
                        }
                        runStage = "Pre"
                        sh "python3 NU_main.py --mode=InitiateHtml --eNBRepository=${GIT_URL} --eNBBranch=${params.eNB_Branch} --eNBCommitID=${GIT_COMMIT} --eNBTargetBranch=${params.eNB_TargetBranch} --ADBIPAddress='none' ${mainPythonAllXmlFiles}  --runStage=${runStage}"
                        String[] myXmlTestSuite = testXMLFile.split("\\r?\\n")
                        for (xmlFile in myXmlTestSuite) {
                            if (fileExists(xmlFile)) {
                                try {
                                    sh "python3 NU_main.py --mode=TesteNB --eNBRepository=${GIT_URL} --eNBBranch=${params.eNB_Branch} --eNBCommitID=${GIT_COMMIT} --eNBTargetBranch=${params.eNB_TargetBranch} --ADBIPAddress='none' --XMLTestFile=${xmlFile} --runStage=${runStage}"
                                    //sh "python3 NU_main.py --mode=TesteNB --eNBRepository=${GIT_URL} --eNBBranch=${params.eNB_Branch} --eNBCommitID=${GIT_COMMIT} --eNBTargetBranch=${params.eNB_TargetBranch} --eNB_AllowMerge=${eNB_AllowMergeRequestProcess} --XMLTestFile=${xmlFile}"
                                    //sh "python3 NU_main.py --mode=TesteNB --eNBSourceCodePath=${params.eNB_SourceCodePath} --UESourceCodePath=${params.eNB_SourceCodePath} --eNBRepository=${GIT_URL} --eNBBranch=${params.eNB_Branch} --eNBCommitID=${GIT_COMMIT} --eNB_AllowMerge=${eNB_AllowMergeRequestProcess} --eNBTargetBranch=${params.eNB_TargetBranch} --XMLTestFile=${xmlFile}"
                                } catch (Exception e) {
                                    currentBuild.result = 'FAILURE'
                                    buildStageStatus = false
                                }
                            }
                        }
                        //sh "python3 NU_main.py --mode=FinalizeHtml --finalStatus=${buildStageStatus} --eNBIPAddress=${params.eNB_IPAddress} --eNBUserName=${eNB_Username} --eNBPassword=${eNB_Password}"
                    //}
                    }
                    dir ('colosseum-cm/ansible') {
                        sh "ansible-playbook oai.yml -e 'ansible_python_interpreter=/usr/bin/python3'"
                    }
                    dir ('ci-scripts') {
                        // If not present picking a default XML file
                        if (params.pythonTestXmlFile == null) {
                            // picking default
                            testXMLFile = 'xml_files/gnb_usrp_build.xml'
                            echo "Test XML file(default):   ${testXMLFile}"
                            mainPythonAllXmlFiles += "--XMLTestFile=" + testXMLFile + " "
                        } else {
                            String[] myXmlTestSuite = testXMLFile.split("\\r?\\n")
                            for (xmlFile in myXmlTestSuite) {
                                if (fileExists(xmlFile)) {
                                    mainPythonAllXmlFiles += "--XMLTestFile=" + xmlFile + " "
                                    echo "Test XML file         :   ${xmlFile}"
                                }
                            }
                        }
                        runStage = "Post"
                        //sh "python3 NU_main.py --mode=InitiateHtml --eNBRepository=${GIT_URL} --eNBBranch=${params.eNB_Branch} --eNBCommitID=${GIT_COMMIT} --eNBTargetBranch=${params.eNB_TargetBranch} --ADBIPAddress='none' ${mainPythonAllXmlFiles}  --runStage=${runStage}"
                        String[] myXmlTestSuite = testXMLFile.split("\\r?\\n")
                        for (xmlFile in myXmlTestSuite) {
                            if (fileExists(xmlFile)) {
                                try {
                                    sh "python3 NU_main.py --mode=TesteNB --eNBRepository=${GIT_URL} --eNBBranch=${params.eNB_Branch} --eNBCommitID=${GIT_COMMIT} --eNBTargetBranch=${params.eNB_TargetBranch} --ADBIPAddress='none' --XMLTestFile=${xmlFile} --runStage=${runStage}"
                                    //sh "python3 NU_main.py --mode=TesteNB --eNBRepository=${GIT_URL} --eNBBranch=${params.eNB_Branch} --eNBCommitID=${GIT_COMMIT} --eNBTargetBranch=${params.eNB_TargetBranch} --eNB_AllowMerge=${eNB_AllowMergeRequestProcess} --XMLTestFile=${xmlFile}"
                                    //sh "python3 NU_main.py --mode=TesteNB --eNBSourceCodePath=${params.eNB_SourceCodePath} --UESourceCodePath=${params.eNB_SourceCodePath} --eNBRepository=${GIT_URL} --eNBBranch=${params.eNB_Branch} --eNBCommitID=${GIT_COMMIT} --eNB_AllowMerge=${eNB_AllowMergeRequestProcess} --eNBTargetBranch=${params.eNB_TargetBranch} --XMLTestFile=${xmlFile}"
                                } catch (Exception e) {
                                    currentBuild.result = 'FAILURE'
                                    buildStageStatus = false
                                }
                            }
                        }
                        sh "python3 NU_main.py --mode=FinalizeHtml --finalStatus=${buildStageStatus}"
                    //}
                    }
                }
            }
	    }

        // stage ("Analyze") {
        //     parallel {
		// 		stage('Analyze NR UE') {
		// 			steps {
		// 				script {
		// 					gitlabCommitStatus(name: "Analyze NR UE") {
		// 							echo '\u2705 \u001B[32mAnalyze NR UE\u001B[0m'
		// 							sh "python3 ci-scripts/NU_main.py --mode=AnalyzeOAIUE --UEIPAddress=dummy --UEUserName=dummy --UEPassword=dummy"
		// 					}
		// 				}
		// 				/*
		// 				post {
		// 					success {
		// 						script {
		// 						termStatusArray[termUE] = true
		// 						}
		// 					}
		// 				}
		// 				*/
		// 			}
		// 		}
		// 		stage('Analyze NR eNB') {
		// 			steps {
		// 				script {
		// 					gitlabCommitStatus(name: "Analyze NR eNB") {
		// 							echo '\u2705 \u001B[32mAnalyze NR eNB\u001B[0m'
		// 							sh "python3 ci-scripts/NU_main.py --mode=AnalyzeeNB --eNBIPAddress=dummy --eNBUserName=dummy --eNBPassword=dummy"
		// 					}
		// 				}
		// 				/*
		// 				post {
		// 					success {
		// 						script {
		// 						termStatusArray[termENB] = true
		// 						}
		// 					}
		// 				}
		// 				*/
		// 			}
		// 		}
        //     }
        // }        
    }
    // stages {
    //     stage ("print latest commit info") {
    //         steps {
    //             script {
    //                 gitlabCommitStatus(name: "Print latest commit info") {
    //                     echo "Building on: "
    //                     echo "  Repository -- ${GIT_URL}"
    //                     echo "  Branch -- ${GIT_BRANCH}"
    //                     echo "  Commit -- ${GIT_COMMIT}"
    //                     echo "ENV eNB_mergeRequest: ${params.eNB_mergeRequest}"
    //                     echo "ENV eNB_Repository: ${params.eNB_Repository}"
    //                     echo "ENV source branch: ${params.eNB_Branch}"
    //                     echo "ENV target branch: ${params.eNB_TargetBranch}"
    //                 }
    //             }
    //         }
    //     }
        
    //     stage ('Clone Ansible toolchain') {
    //         steps {
    //             script {
    //                 gitlabCommitStatus(name: "Clone Ansible scripts") {
    //                     sh "git clone https://gitlab.com/shweta.shrivastava/colosseum-cm.git"
    //                 }
    //             }
    //         }
    //     }
    //     stage ('Configure Ansible toolchain') {
    //         steps {
    //             script {
    //                 gitlabCommitStatus(name: "Configure Ansible toolchain") {
    //                     dir ('colosseum-cm') {
    //                         sh "git checkout oai-ci"
    //                         sh "./bootstrap.sh ${GIT_URL} ${params.eNB_Branch} ${GIT_COMMIT}"
    //                     }
    //                 }
    //             }
    //         }
    //     }
    //     stage ('Run Ansible toolchain') {
    //         steps {
    //             script {
    //                 gitlabCommitStatus(name: "Run Ansible toolchain") {
    //                     dir ('colosseum-cm/ansible') {
    //                         sh "ansible-playbook oai.yml -e 'ansible_python_interpreter=/usr/bin/python3'"
    //                     }
    //                 }
    //             }
    //         }
    //     }

    //     stage ("Analyze") {
    //         parallel {
	// 			stage('Analyze NR UE') {
	// 				steps {
	// 					script {
	// 						gitlabCommitStatus(name: "Analyze NR UE") {
	// 								echo '\u2705 \u001B[32mAnalyze NR UE\u001B[0m'
	// 								sh "python3 ci-scripts/NU_main.py --mode=AnalyzeOAIUE --UEIPAddress=dummy --UEUserName=dummy --UEPassword=dummy"
	// 						}
	// 					}
	// 					/*
	// 					post {
	// 						success {
	// 							script {
	// 							termStatusArray[termUE] = true
	// 							}
	// 						}
	// 					}
	// 					*/
	// 				}
	// 			}
	// 			stage('Analyze NR eNB') {
	// 				steps {
	// 					script {
	// 						gitlabCommitStatus(name: "Analyze NR eNB") {
	// 								echo '\u2705 \u001B[32mAnalyze NR eNB\u001B[0m'
	// 								sh "python3 ci-scripts/NU_main.py --mode=AnalyzeeNB --eNBIPAddress=dummy --eNBUserName=dummy --eNBPassword=dummy"
	// 						}
	// 					}
	// 					/*
	// 					post {
	// 						success {
	// 							script {
	// 							termStatusArray[termENB] = true
	// 							}
	// 						}
	// 					}
	// 					*/
	// 				}
	// 			}
    //         }
    //     }        
    // }
    // post {
    //     always {
    //         script {
    //             //finalizeSlaveJob('Col-CI')
    //             sh "rm -rf colosseum-cm@tmp"
    //             sh "rm -rf colosseum-cm"
    //         }
    //     }
    //     failure {
    //         script {
    //             currentBuild.result = 'FAILURE'
    //         }
    //     }
    // }
}

